# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'c:\Users\Kisun\Desktop\RectangleMappingTool\src\main\resources\base\fstringdialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_StringDialog(object):
    def setupUi(self, StringDialog):
        StringDialog.setObjectName("StringDialog")
        StringDialog.resize(801, 495)
        self.verticalLayout = QtWidgets.QVBoxLayout(StringDialog)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_29 = QtWidgets.QLabel(StringDialog)
        self.label_29.setWordWrap(True)
        self.label_29.setObjectName("label_29")
        self.verticalLayout.addWidget(self.label_29)
        self.label_2 = QtWidgets.QLabel(StringDialog)
        self.label_2.setWordWrap(True)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.label = QtWidgets.QLabel(StringDialog)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.label_3 = QtWidgets.QLabel(StringDialog)
        self.label_3.setWordWrap(True)
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.label_5 = QtWidgets.QLabel(StringDialog)
        self.label_5.setWordWrap(True)
        self.label_5.setObjectName("label_5")
        self.verticalLayout.addWidget(self.label_5)
        self.available_vars_label = QtWidgets.QLabel(StringDialog)
        self.available_vars_label.setObjectName("available_vars_label")
        self.verticalLayout.addWidget(self.available_vars_label)
        self.fstring_edit = QtWidgets.QPlainTextEdit(StringDialog)
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        self.fstring_edit.setFont(font)
        self.fstring_edit.setLineWrapMode(QtWidgets.QPlainTextEdit.NoWrap)
        self.fstring_edit.setObjectName("fstring_edit")
        self.verticalLayout.addWidget(self.fstring_edit)
        self.done_button = QtWidgets.QPushButton(StringDialog)
        self.done_button.setObjectName("done_button")
        self.verticalLayout.addWidget(self.done_button)

        self.retranslateUi(StringDialog)
        QtCore.QMetaObject.connectSlotsByName(StringDialog)

    def retranslateUi(self, StringDialog):
        _translate = QtCore.QCoreApplication.translate
        StringDialog.setWindowTitle(_translate("StringDialog", "Dialog"))
        self.label_29.setText(_translate("StringDialog", "This allows you to generate custom text lines based on rectangle data. The formatting is similar to Python\'s f-string, in which an expression can be placed within {curly brackets} that will be formatted in the string literal."))
        self.label_2.setText(_translate("StringDialog", "For example, if you want to generate the string \"Rectangle ... is located at ...\" for each rectangle, you might write \"Rectangle {row_number} has points at ({x1},{y1}) and ({x2},{y2})."))
        self.label.setText(_translate("StringDialog", "This is not what *actually* occurs internally, as implied by the ability to define custom variable identifiers."))
        self.label_3.setText(_translate("StringDialog", "If you need greater control or are more experienced, you are probably better off exporting all points to a CSV file and working from there (instead of using this functionality)."))
        self.label_5.setText(_translate("StringDialog", "The context of the textbox below will be treated as if it were an f-string and will be executed for each rectangle, with results newline separated. The available values are defined by the columns in the coordinate table, and are shown below. Note that you must write the column names *exactly as they appear* for this to work."))
        self.available_vars_label.setText(_translate("StringDialog", "Available variables:"))
        self.fstring_edit.setPlainText(_translate("StringDialog", "if {x1_conv} <= {x2_conv} and {y1_conv} <= {y2_conv}:\n"
"    pass"))
        self.done_button.setText(_translate("StringDialog", "Done"))
